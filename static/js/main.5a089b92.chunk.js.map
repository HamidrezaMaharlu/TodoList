{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","components/TodoEntry.js","components/TodoItem.js","components/TodoItems.js","components/EraseCompleted.js","components/TodoFooter.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","id","destroy","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","observable","action","lastID","todos","todosAll","push","forEach","todo","currentid","console","log","remove","lastId","_this","autorun","filter","_this2","_this3","_this4","_loop","_i","i","length","TodoEntry","state","value","handleKeyDown","event","keyCode","preventDefault","TodoStore","addTodo","setState","react_default","a","createElement","className","onChange","target","onKeyDown","type","placeholder","Component","TodoItem","observer","props","possibleConstructorReturn","getPrototypeOf","call","onToggle","toggle","deletetodoo","bind","assertThisInitialized","todoStore","removeTodo","checked","onClick","TodoItems","map","components_TodoItem","key","EraseCompleted","clear","Clear","TodoFooter","active","complete","all","selectedAll","selectedActive","selectedComplete","All","Complete","Active","components_EraseCompleted","App","components_TodoEntry","components_TodoItems","components_TodoFooter","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a089b92.chunk.js","sourcesContent":["import {observable, action} from 'mobx'\n\nexport default class TodoModel {\n    store\n    id\n    @observable title\n    @observable completed\n    @observable destroy\n\n    constructor(store, title, completed, id, destroy){\n        this.title = title\n        this.completed = completed\n        this.id = id\n        this.store = store\n        this.destroy = destroy\n    }\n\n    @action\n    toggle() {\n        this.completed = !this.completed\n    }\n}","import {observable, autorun, action} from 'mobx';\nimport TodoModel from './TodoModel';\n\nclass TodoStore {\n    @observable todos= []\n    lastID = 0\n\n    @observable\n    todosAll = [];\n\n    @action\n    addTodo(title) {\n        this.todos = this.todosAll;\n        this.todos.push(new TodoModel(this, title, false, this.lastID ++, false))\n        this.todosAll = this.todos;\n        this.todosAll.forEach(todo => {\n        });\n    }\n    @action\n  removeTodo(currentid) {\n    console.log(\"destroy id: \" + currentid);\n    this.todosAll.remove(this.todosAll[currentid]);\n    this.lastId = this.lastId - 1;\n    this.todosAll.forEach(todo => {\n      if (todo.id > currentid) {\n        todo.id = todo.id - 1;\n      } else if (todo.id < currentid) {\n        todo.id = todo.id + 0;\n      }\n    });\n    this.todos = this.todosAll;\n  }\n  @action\n  All() {\n    autorun(() => {\n      this.todos = this.todosAll.filter(todo => todo.completed !== \"\");\n    });\n  }\n  @action\n  Active() {\n    autorun(() => {\n      this.todos = this.todosAll.filter(todo => todo.completed === false);\n    });\n  }\n  @action\n  Complete() {\n    autorun(() => {\n      this.todos = this.todosAll.filter(todo => todo.completed === true);\n    });\n  }\n  @action\n  Clear() {\n    for (let i = 0; i < this.todosAll.length; i++) {\n      if (this.todosAll[i].completed === true) {\n        this.todosAll.remove(this.todosAll[i]);\n        this.todosAll.forEach(todo => {\n          if (todo.id > i) {\n            todo.id = todo.id - 1;\n          } else if (todo.id < i) {\n            todo.id = todo.id + 0;\n          }\n        });\n        this.lastId--;\n        i--;\n      }\n    }\n    this.todos = this.todosAll;\n  }\n\n\n}\n\nconst store= new TodoStore()\nexport default store","import React, {Component} from 'react'\nimport TodoStore from '../stores/TodoStore'\n\nclass TodoEntry extends Component {\n    state = {\n        value: ''\n    };\n\n    handleKeyDown = event => {\n        if(event.keyCode !== 13){\n            return;\n        }\n        event.preventDefault()\n        TodoStore.addTodo(this.state.value)\n        this.setState({\n            value: ''\n        })\n    }\n\n    render() {\n        return(\n            <header className=\"header\">\n          <h1>Todo List</h1>\n          <input\n          value={this.state.value}\n          onChange={event => this.setState({value: event.target.value})}\n          onKeyDown={\n              event => this.handleKeyDown(event)\n          }\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"what needs to be done?\"\n          />\n        </header>\n        )\n    }\n\n}\nexport default TodoEntry;","import React, {Component} from 'react'\nimport {observer} from 'mobx-react'\nimport todoStore from \"../stores/TodoStore\";\n\n@observer\nclass TodoItem extends Component {\n    onToggle= () =>{\n        this.props.todo.toggle()\n    };\n    constructor(props) {   \n         super(props);    \n         this.deletetodoo = this.deletetodoo.bind(this);  \n        }\n    deletetodoo() {    \n      todoStore.removeTodo(this.props.todo.id); \n     }\n  \n    render() {\n        const { todo } = this.props;\n        return(\n                <li className={todo.completed ? \"completed\" : \" \"}>\n                    <div className=\"view\">\n                        <input\n                        onChange={this.onToggle}\n                         type=\"checkbox\" \n                         className=\"toggle\" \n                         value=\"on\" \n                         checked={todo.completed} \n                         />\n                        <label>{todo.title}</label>\n                        <button className=\"destroy\" onClick={this.deletetodoo} />\n                    </div>\n                </li>\n        );\n    }\n\n}\nexport default TodoItem;","import React, {Component} from 'react';\nimport TodoItem from './TodoItem';\nimport TodoStore from '../stores/TodoStore'\nimport {observer} from 'mobx-react'\n\n@observer\nclass TodoItems extends Component {\n    render() {\n        return(\n             <section className=\"main\">\n            <ul className=\"todo-list\"> {\n                TodoStore.todos.map(todo=>{\n                    return(\n                        <TodoItem key={todo.id} todo= {todo} />\n                    )\n                })\n            }\n            </ul>\n            </section>\n        );\n    }\n\n}\nexport default TodoItems;","import React, { Component } from \"react\";\nimport TodoStore from \"../stores/TodoStore\";\nimport { observer } from \"mobx-react\";\n@observer\nclass EraseCompleted extends Component {\n  constructor(props) {\n      super(props)\n    this.clear = this.clear.bind(this);\n  }\n  clear() {\n    TodoStore.Clear();\n      }\n  render() {\n    if (TodoStore.todosAll.filter(todo => todo.completed === true).length>0) {\n      return (\n        <button onClick={this.clear} className=\"clear-completed\">\n         Erase completed \n        </button>\n      );\n    } else {\n      return null;\n    }\n  }\n}\nexport default EraseCompleted","import EraseCompleted from \"./EraseCompleted\";\nimport React, { Component } from \"react\";\nimport TodoStore from \"../stores/TodoStore\";\nimport { observer } from \"mobx-react\";\n@observer\nclass TodoFooter extends Component {\n  constructor(props) {\n    super(props);\n    this.active = this.active.bind(this);\n    this.complete = this.complete.bind(this);\n    this.all = this.all.bind(this);\n\n    this.state = {\n      selectedAll: true,\n      selectedActive: false,\n      selectedComplete: false\n    };\n  }\n  all() {\n    this.setState({\n      selectedAll: true,\n      selectedActive: false,\n      selectedComplete: false\n    });\n    TodoStore.All();\n  }\n  complete() {\n    this.setState({\n      selectedAll: false,\n      selectedActive: false,\n      selectedComplete: true\n    });\n    TodoStore.Complete();\n  }\n  active() {\n    this.setState({\n      selectedAll: false,\n      selectedActive: true,\n      selectedComplete: false\n    });\n    TodoStore.Active();\n  }\n\n  render() {\n    if (TodoStore.todosAll.length > 0) {\n      return (\n        <div className=\"footer\">\n          <button className=\"todo-count\">\n            <span>\n              {TodoStore.todosAll.filter(todo => todo.completed === false).length}\n            </span>\n            <strong> task(s) left </strong>\n          </button>\n          <ul className=\"filters\">\n            <li onClick={this.all}>\n              <button\n                 className={this.state.selectedAll ? \"selected\" : \" \"}>\n                  {\" \"}\n                  All tasks\n              </button>\n            </li>\n            <li onClick={this.active}>\n              <button type=\"submit\"\n                 className={this.state.selectedActive ? \"selected\" : \" \"}>\n                  {\" \"}\n                  Active tasks\n              </button>\n            </li>\n            <li onClick={this.complete}>\n              <button type=\"submit\"\n                className={this.state.selectedComplete ? \"selected\" : \" \"}>\n                  Completed tasks\n              </button>\n            </li>\n          </ul>\n          <EraseCompleted />\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\nexport default TodoFooter;\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport \"./App.css\";\nimport TodoEntry from \"./components/TodoEntry\";\nimport TodoItems from \"./components/TodoItems\";\nimport TodoFooter from \"./components/TodoFooter\";\n\n@observer\nclass App extends Component {\n  render() {\n    return [\n      <div id=\"todoapp\" className=\"todoapp\">\n        <TodoEntry />\n        <TodoItems />\n        <TodoFooter />\n      </div>,\n      <footer className=\"info\">\n        <p>\n          Written by <a href=\"https://linkedin.com/in/hamidreza-maharlu-4537867b\">Hamidreza Maharlu</a>\n        </p>\n        <p>\n          Project of <a href=\"https://maktabkhooneh.org\">Maktabkhooneh</a>\n        </p>\n      </footer>,\n    ];\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}